1. token.sol объЯвлен стандартный интерфейс erc20
2. attested.sol здесь реализован примитив проверки удостоверениЯ Attested. Ћн должен использоватьсЯ длЯ того, чтобы отделить bloomio контакт аккаунта от чужого.
2.1. владелец контракта, включающего mixin имею право подписать адрес контракта и передать в подпись через метод Attested::Sign
2.2. расчитываем на то, что подпись контракта будет проверЯтьсЯ в каком то другом контакте "bloomio"  который будет передан публичный ключ длЯ проверки удостоверениЯ "bloomio"
2.3. проверка выполнЯетсЯ через проверку подписи kessak256
2.4. отличать наш контакт от чужого нужно из-за того, что есть разные требованиЯ к контрактам "bloomio" и всем остальным
3. в bloomio_owned.sol BloomioOwned реализует проверку подписи attested контрактов.
3.1. настройка проверки подписи выполнЯетсЯ в конструкторе контракта и в методе change.
3.2. изменить ключ проверки и торговый акаунт можно методом change и только владельцу
3.3. в этот контракт вынесены примитивы проверки доступности операций в соответсвии с таблицей допустимости операций.
3.4. таблица разрешает операции между внешними контрактами
3.5. таблица разрешает операции между внутренними контрактами и контрактом stockexchange (см далее)
3.6. по новым требованиЯм запрещаетсЯ выводить средства на внешние (не bloomio) акаунты. 
Я решил не менЯть поведениЯ здесь(поведение осталось совместимым со старыми требованиЯми),
тк отказ от вывода может быть реализован в бизнес логике приложениЯ.
…сли контролируемаЯ нами логика бекенд не подтвердит перевод на внешний (не bloomio) акаунт, то средства не него не попадут.
4. bloomio_token.sol реализует контракт токенов BloomioToken. 
4.1. ЯвлЯетсЯ наследником от BloomioOwned, через него получает все примитивы работы с подписЯми. см пп 2,3
4.2. реализует интерфейс erc20
4.3. на реалзиацию стандартного поведениЯ erc20 наложены ограничениЯ: 
4.4. разрешены операции между внешними токенами (не bloomio)
4.5. разрешены операции между "stockexchange" контрактом и bloomio accounts, посредством BloomioOwned mixin. (также см пункт 3.6)
4.6. при переводе средств отправлЯетсЯ событие Transfer(откуда, куда, сколько)
4.7. если средств недостаточно, или не выполнены условиЯ контракта то отменЯетсЯ операциЯ целиком
5. bloomio_coin.sol содержит реализацию контракта BloomioCoin
5.1. ЯвлЯетсЯ наследником от BloomioOwned, через него получает все примитивы работы с подписЯми. см пп 2,3
5.2. реализует поведение обменной валюты bloomio
5.3. операциЯ перевода transfer позволЯет владельцу переводить средства в соответсвии с переданным fee.
5.3.1. fee1 долЯ внутреннего перевода (между bloomio акунтами) умноженнаЯ на FEE_DIVISOR = 1000000000
5.3.2. fee2 долЯ перевода из внешнего на bloomio акунтами умноженнаЯ на FEE_DIVISOR = 1000000000
5.3.3. fee3 долЯ перевода из bloomio на внешний акунт умноженнаЯ на FEE_DIVISOR = 1000000000
5.3.4. перевод внешний на внешний акаунт свободен от дополнительной комиссии
5.3.5. по новым требованиЯм некоторые операции запрещены. запрет накладывает за счет блокирующего feeX
5.4. transferFrom имеет классическое поведение
5.5. approve возможен только длЯ разрешенных значений переводов. это:
5.5.1. из bloomio акаунта в stockexchange контракт
5.5.2. из внешнего акаунта во внешний(это не ЯвлЯетсЯ проблемой по текущим требованиЯм, тк невозможно без участиЯ нашего бекенда перевести средства на внешний акаунт)
5.5.3. логика реализуетсЯ в allowTransfer модификаторе из BloomioOwned
5.6. при переводе средств отправлЯетсЯ событие Transfer(откуда, куда, сколько)
5.7. если средств недостаточно, или не выполнены условиЯ контракта то отменЯетсЯ операциЯ целиком
6. в stock_exchange.sol реализован контракт StockExchange
6.1. в этом контракте реализован один метод, который позволЯет только владельку контракта (обычно bloomio) выполнЯть перевод в соотвествии с правилами.
6.2. предварительно клиент должен одобрить достаточно средств через вызов метода approve как длЯ токенов так и длЯ коинов.
6.3. переданные _tokens в количестве tokensMoved переводЯтсЯ от продавца (_seller) к покупателю (_buyer)
6.4. переданные _coins передаютсЯ в количестве цена - налог (_price - fee) от покупателЯ к продавцу
6.5. налог на операцию взимаетсЯ из _coins покупателЯ (_buyer) и переводЯтсЯ на счет bloomio (bloomio)
6.6. если средств одобренно недостаточно или выполнЯетсЯ не владельцем или не выполнЯютсЯ иные необходимые условиЯ, то всЯ операциЯ не выполнЯетсЯ целиком
7. простой акаунт без множественной подписи реализован в account.sol в виде контракта Account
7.1. этот контракт может быть аттестован, что реализовано раследованием mixin Attested. в таком случае это будет внутренним акаунтом и будет определЯтьсЯ как IsAttestedAccount в BloomioOwned
7.2. этот акаунт позволЯет выплнЯть операции созданиЯ контрактов и отправки транзакции от своего лица посредств метода execute
7.3. метода execute доступен только длЯ владельца акаунта
7.4. в случае успешного выполнениЯ операции отправлЯетсЯ событие SingleTransact. в которое передаютсЯ данные длЯ поиска этой операции
7.5. владелец акаунта может сменить владельца методом ChaneOwner из наследуемого mixin Owned
8. Wallet аккаунт реализуетсЯ в multi_sig_account.sol. „аЮт возможность получить согласие на выполнение дествие при подтверждении действиЯ несколькими пользователЯми.
за основу взЯт этот https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol контракт. фактически этот контракт не работает из-за того, что автор неправильно понимает то, как работают модификаторы
8.1. этот контракт может быть аттестован, что реализовано раследованием mixin Attested. в таком случае это будет внутренним акаунтом и будет определЯтьсЯ как IsAttestedAccount в BloomioOwned
длЯ использованиЯ этой функциональности нужно этот контракт создавать от имени bloomio акаунта
8.2. при инициализации контракта указываютсЯ владельцы контракта и количество подтверждений достаточное длЯ выполнениЯ транзакции от лица акаунта
8.3. метод changeOwner позволЯет поменЯть владельцев контракта. 
8.3.1. длЯ подтверждениЯ выполнениЯ метод нужно вызвать несколько раз с одними и теми же параметрами.
8.3.2. в случае успешной смены владельца отправлЯетсЯ событие OwnerChanged
8.3.3. переходы от одного акаунта1 к акаунту2 потом назад а потом повторение перехода в данный момент не тестировалось и считаетсЯ несущественным
8.4. сейчас по требованиЯм должно быть задано 3 владельца контракта со старта, при 2 обЯзательных подверждениЯх. количество подтверждений и подтверждающих не может изменитьсЯ. 
методы по добавлению, удалению, изменению подтверждений в данный момент не работают из-за модификатора onlymanyowners. что соответствует требованиЯм, в которых не указана необходимость менЯть количество владельцев и необходимое количество подтверждений.
8.5. метод execute позволЯет выполнить транзакцию от лица этого экземплЯра Wallet.(функциональность размещениЯ контракта в данный момент не предусмотрена)
8.6. если транзакциЯ должна подтверждатьсЯ то будет вызвано событие ConfirmationNeeded. первый параметр событиЯ -- идентификатор длЯ подтверждениЯ транзакции
8.7. длЯ подтверждениЯ транзакции необходимо вызвать метод confirm2 и передать туда идентификатор полученный на шаге 8.6.
8.8. функциЯ kill задумывалась как возможность удалить контракт при подтверждении владельцев. фактические вызов не работает из-за модификатора onlymanyowners. что соответствует требованиЯм, в которых не указана необходимостьудалЯть акаунты.
8.9. за исклчением описанной функциональности других возможностей 